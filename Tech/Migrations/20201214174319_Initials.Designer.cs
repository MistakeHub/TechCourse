// <auto-generated />

using System;
using BackEnd.InterTech;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace BackEnd.Migrations
{
    [DbContext(typeof(TechDbContext))]
    [Migration("20201214174319_Initials")]
    partial class Initials
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Tech.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Apartament")
                        .HasColumnType("int");

                    b.Property<string>("Home")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Tech.Models.Auto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DateStart")
                        .HasColumnType("int");

                    b.Property<int?>("IdBrandid")
                        .HasColumnType("int");

                    b.Property<int?>("IdPersonId")
                        .HasColumnType("int");

                    b.Property<string>("RegNumer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdBrandid");

                    b.HasIndex("IdPersonId");

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("Tech.Models.Brand", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBrand")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Tech.Models.Break", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BreakName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodBreak")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("RequestForFixId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestForFixId");

                    b.ToTable("Breaks");
                });

            modelBuilder.Entity("Tech.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("IdPersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdAddressId");

                    b.HasIndex("IdPersonId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Tech.Models.Enroller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("IdPersonId")
                        .HasColumnType("int");

                    b.Property<int?>("IdSpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("idStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonId");

                    b.HasIndex("IdSpecialtyId");

                    b.HasIndex("idStatusId");

                    b.ToTable("Enrollers");
                });

            modelBuilder.Entity("Tech.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurnameNP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Tech.Models.RequestForFix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Daterequest")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAutoId")
                        .HasColumnType("int");

                    b.Property<int?>("IdClientId")
                        .HasColumnType("int");

                    b.Property<int?>("IdEnrollerId")
                        .HasColumnType("int");

                    b.Property<double>("PriceBreak")
                        .HasColumnType("float");

                    b.Property<bool>("StatusReady")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdAutoId");

                    b.HasIndex("IdClientId");

                    b.HasIndex("IdEnrollerId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Tech.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TitleSpec")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("Tech.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Tech.Models.Auto", b =>
                {
                    b.HasOne("Tech.Models.Brand", "IdBrand")
                        .WithMany()
                        .HasForeignKey("IdBrandid");

                    b.HasOne("Tech.Models.Person", "IdPerson")
                        .WithMany()
                        .HasForeignKey("IdPersonId");

                    b.Navigation("IdBrand");

                    b.Navigation("IdPerson");
                });

            modelBuilder.Entity("Tech.Models.Break", b =>
                {
                    b.HasOne("Tech.Models.RequestForFix", null)
                        .WithMany("Breaks")
                        .HasForeignKey("RequestForFixId");
                });

            modelBuilder.Entity("Tech.Models.Client", b =>
                {
                    b.HasOne("Tech.Models.Address", "IdAddress")
                        .WithMany()
                        .HasForeignKey("IdAddressId");

                    b.HasOne("Tech.Models.Person", "IdPerson")
                        .WithMany()
                        .HasForeignKey("IdPersonId");

                    b.Navigation("IdAddress");

                    b.Navigation("IdPerson");
                });

            modelBuilder.Entity("Tech.Models.Enroller", b =>
                {
                    b.HasOne("Tech.Models.Person", "IdPerson")
                        .WithMany()
                        .HasForeignKey("IdPersonId");

                    b.HasOne("Tech.Models.Specialty", "IdSpecialty")
                        .WithMany()
                        .HasForeignKey("IdSpecialtyId");

                    b.HasOne("Tech.Models.Status", "idStatus")
                        .WithMany()
                        .HasForeignKey("idStatusId");

                    b.Navigation("IdPerson");

                    b.Navigation("IdSpecialty");

                    b.Navigation("idStatus");
                });

            modelBuilder.Entity("Tech.Models.RequestForFix", b =>
                {
                    b.HasOne("Tech.Models.Auto", "IdAuto")
                        .WithMany()
                        .HasForeignKey("IdAutoId");

                    b.HasOne("Tech.Models.Client", "IdClient")
                        .WithMany()
                        .HasForeignKey("IdClientId");

                    b.HasOne("Tech.Models.Enroller", "IdEnroller")
                        .WithMany()
                        .HasForeignKey("IdEnrollerId");

                    b.Navigation("IdAuto");

                    b.Navigation("IdClient");

                    b.Navigation("IdEnroller");
                });

            modelBuilder.Entity("Tech.Models.RequestForFix", b =>
                {
                    b.Navigation("Breaks");
                });
#pragma warning restore 612, 618
        }
    }
}
