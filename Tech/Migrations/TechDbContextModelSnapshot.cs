// <auto-generated />
using System;
using BackEnd.InterTech;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackEnd.Migrations
{
    [DbContext(typeof(TechDbContext))]
    partial class TechDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("BackEnd.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Apartament")
                        .HasColumnType("int");

                    b.Property<string>("Home")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BackEnd.Models.Auto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Brandid")
                        .HasColumnType("int");

                    b.Property<int?>("BreakId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DateStart")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RegNumer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Brandid");

                    b.HasIndex("BreakId");

                    b.HasIndex("PersonId");

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("BackEnd.Models.Brand", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleBrand")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("BackEnd.Models.Break", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BreakName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodBreak")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Break");
                });

            modelBuilder.Entity("BackEnd.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BackEnd.Models.Enroller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("StatusId");

                    b.ToTable("Enrollers");
                });

            modelBuilder.Entity("BackEnd.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurnameNP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("BackEnd.Models.RequestForFix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AutoId")
                        .HasColumnType("int");

                    b.Property<string>("Breaks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Daterequest")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnrollerId")
                        .HasColumnType("int");

                    b.Property<double>("PriceBreak")
                        .HasColumnType("float");

                    b.Property<bool>("StatusReady")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AutoId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EnrollerId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("BackEnd.Models.RequestForFixArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AutoId")
                        .HasColumnType("int");

                    b.Property<string>("Breaks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Daterequest")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EnrollerId")
                        .HasColumnType("int");

                    b.Property<double>("PriceBreak")
                        .HasColumnType("float");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<bool>("StatusReady")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AutoId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EnrollerId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestForFixArchives");
                });

            modelBuilder.Entity("BackEnd.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("TitleSpec")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("BackEnd.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("BackEnd.Models.Auto", b =>
                {
                    b.HasOne("BackEnd.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("Brandid");

                    b.HasOne("BackEnd.Models.Break", "Break")
                        .WithMany()
                        .HasForeignKey("BreakId");

                    b.HasOne("BackEnd.Models.Person", "Person")
                        .WithMany("autos")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Break");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BackEnd.Models.Client", b =>
                {
                    b.HasOne("BackEnd.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("BackEnd.Models.Enroller", b =>
                {
                    b.HasOne("BackEnd.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("BackEnd.Models.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId");

                    b.HasOne("BackEnd.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Person");

                    b.Navigation("Specialty");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BackEnd.Models.Person", b =>
                {
                    b.HasOne("BackEnd.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BackEnd.Models.RequestForFix", b =>
                {
                    b.HasOne("BackEnd.Models.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoId");

                    b.HasOne("BackEnd.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("BackEnd.Models.Enroller", "Enroller")
                        .WithMany()
                        .HasForeignKey("EnrollerId");

                    b.Navigation("Auto");

                    b.Navigation("Client");

                    b.Navigation("Enroller");
                });

            modelBuilder.Entity("BackEnd.Models.RequestForFixArchive", b =>
                {
                    b.HasOne("BackEnd.Models.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoId");

                    b.HasOne("BackEnd.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("BackEnd.Models.Enroller", "Enroller")
                        .WithMany()
                        .HasForeignKey("EnrollerId");

                    b.HasOne("BackEnd.Models.RequestForFix", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.Navigation("Auto");

                    b.Navigation("Client");

                    b.Navigation("Enroller");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("BackEnd.Models.Person", b =>
                {
                    b.Navigation("autos");
                });
#pragma warning restore 612, 618
        }
    }
}
